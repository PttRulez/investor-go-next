// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: proto/investor.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Investor_GetPortfolioList_FullMethodName           = "/Investor/GetPortfolioList"
	Investor_GetPortfolioSummaryMessage_FullMethodName = "/Investor/GetPortfolioSummaryMessage"
)

// InvestorClient is the client API for Investor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvestorClient interface {
	GetPortfolioList(ctx context.Context, in *PortfolioListRequest, opts ...grpc.CallOption) (*PortfolioListResponse, error)
	GetPortfolioSummaryMessage(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioSummaryResponse, error)
}

type investorClient struct {
	cc grpc.ClientConnInterface
}

func NewInvestorClient(cc grpc.ClientConnInterface) InvestorClient {
	return &investorClient{cc}
}

func (c *investorClient) GetPortfolioList(ctx context.Context, in *PortfolioListRequest, opts ...grpc.CallOption) (*PortfolioListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortfolioListResponse)
	err := c.cc.Invoke(ctx, Investor_GetPortfolioList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investorClient) GetPortfolioSummaryMessage(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortfolioSummaryResponse)
	err := c.cc.Invoke(ctx, Investor_GetPortfolioSummaryMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvestorServer is the server API for Investor service.
// All implementations must embed UnimplementedInvestorServer
// for forward compatibility
type InvestorServer interface {
	GetPortfolioList(context.Context, *PortfolioListRequest) (*PortfolioListResponse, error)
	GetPortfolioSummaryMessage(context.Context, *PortfolioRequest) (*PortfolioSummaryResponse, error)
	mustEmbedUnimplementedInvestorServer()
}

// UnimplementedInvestorServer must be embedded to have forward compatible implementations.
type UnimplementedInvestorServer struct {
}

func (UnimplementedInvestorServer) GetPortfolioList(context.Context, *PortfolioListRequest) (*PortfolioListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioList not implemented")
}
func (UnimplementedInvestorServer) GetPortfolioSummaryMessage(context.Context, *PortfolioRequest) (*PortfolioSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolioSummaryMessage not implemented")
}
func (UnimplementedInvestorServer) mustEmbedUnimplementedInvestorServer() {}

// UnsafeInvestorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvestorServer will
// result in compilation errors.
type UnsafeInvestorServer interface {
	mustEmbedUnimplementedInvestorServer()
}

func RegisterInvestorServer(s grpc.ServiceRegistrar, srv InvestorServer) {
	s.RegisterService(&Investor_ServiceDesc, srv)
}

func _Investor_GetPortfolioList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServer).GetPortfolioList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Investor_GetPortfolioList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServer).GetPortfolioList(ctx, req.(*PortfolioListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Investor_GetPortfolioSummaryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServer).GetPortfolioSummaryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Investor_GetPortfolioSummaryMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServer).GetPortfolioSummaryMessage(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Investor_ServiceDesc is the grpc.ServiceDesc for Investor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Investor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Investor",
	HandlerType: (*InvestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPortfolioList",
			Handler:    _Investor_GetPortfolioList_Handler,
		},
		{
			MethodName: "GetPortfolioSummaryMessage",
			Handler:    _Investor_GetPortfolioSummaryMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/investor.proto",
}
